library("dplyr")
library("stats")
library("GGally")
library("ggpubr")
library("readr")
library("tidyverse") #for data manipulation and visualization
library("grid")
library("gridExtra")
library("kableExtra")
library("knitr")
library("dynlm")
library("FinTS")
library("fGarch")
BTCN <- read.csv("BTC-USD.csv")
BTCN$Close <- ts(BTCN$Close)
BTCN$Date <- seq.Date(as.Date('2021-01-01'), by = 'day', length.out = length(BTCN$Close))
ggplot(BTCN, aes(y = Close, x = Date)) + geom_line(col = 'red') +
labs(title = 'BTC Daily Closing Value', y = 'Closing price')
hist(BTCN$Close, main="", breaks=20, freq=FALSE, col="grey", xlab = "closing price")
# Step 1: Estimate mean equation r = beta + error
BTCN.mean <- dynlm(Close ~ 1, data = BTCN)
# Step 2: Retrieve the residuals from the former model and square them
ehatsq <- ts(resid(BTCN.mean)^2)
# Step 3: regress squared residuals on one-lagged squared residuals
BTCN.arch <- dynlm(ehatsq ~ L(ehatsq), data = ehatsq)
summary(BTCN.arch)
byd.archTest <- ArchTest(BTCN$Close, lags = 1, demean = TRUE)
byd.archTest
arch.fit <- garchFit(~garch(1,0), data = BTCN$Close, trace = F)
summary(arch.fit)
BTCN$ht <- arch.fit@h.t
ggplot(BTCN, aes(y = ht, x = Date)) + geom_line(col = '#ff9933') + ylab('Conditional Variance') + xlab('Date')
library("dplyr")
library("stats")
library("GGally")
library("ggpubr")
library("readr")
library("tidyverse") #for data manipulation and visualization
library("grid")
library("gridExtra")
library("kableExtra")
library("knitr")
library("dynlm")
library("FinTS")
library("fGarch")
BTCN <- read.csv("BTC-USD.csv")
BTCN$Close <- ts(BTCN$Close)
BTCN$Date <- seq.Date(as.Date('2021-01-01'), by = 'day', length.out = length(BTCN$Close))
ggplot(BTCN, aes(y = Close, x = Date)) + geom_line(col = 'red') +
labs(title = 'BTC Daily Closing Value', y = 'Closing price')
hist(BTCN$Close, main="", breaks=20, freq=FALSE, col="grey", xlab = "closing price")
# Step 1: Estimate mean equation r = beta + error
BTCN.mean <- dynlm(Close ~ 1, data = BTCN)
# Step 2: Retrieve the residuals from the former model and square them
ehatsq <- ts(resid(BTCN.mean)^2)
# Step 3: regress squared residuals on one-lagged squared residuals
BTCN.arch <- dynlm(ehatsq ~ L(ehatsq), data = ehatsq)
summary(BTCN.arch)
byd.archTest <- ArchTest(BTCN$Close, lags = 1, demean = TRUE)
byd.archTest
arch.fit <- garchFit(~garch(1,0), data = BTCN$Close, trace = F)
summary(arch.fit)
BTCN$ht <- arch.fit@h.t
ggplot(BTCN, aes(y = ht, x = Date)) + geom_line(col = '#ff9933') + ylab('Conditional Variance') + xlab('Date')
predict(arch.fit, n.ahead = 2, mse ="cond", plot = T)
predict(arch.fit, n.ahead = 5, mse ="cond", plot = T)
predict(arch.fit, n.ahead = 2, mse ="cond", plot = T)
